name: .NET

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest
    outputs: # https://stackoverflow.com/questions/59175332/using-output-from-a-previous-job-in-a-new-one-in-a-github-action
      Version: ${{ steps.gitversion.outputs.MajorMinorPatch }}
      CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }} 

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 #fetch-depth is needed for GitVersion
    #Install and calculate the new version with GitVersion  
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v4.0.1
      with:
        versionSpec: 6.x
    - name: Determine Version
      uses: gittools/actions/gitversion/execute@v4.0.1
      id: gitversion # step id used as reference for output values
    - name: Display GitVersion outputs
      run: |
        echo "Version: ${{ steps.gitversion.outputs.MajorMinorPatch }}"
        echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}"
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v4.3.1
      with:
        dotnet-version: 10.0.x
    - name: Run automated tests
      run: dotnet test src/TBE.Tests/TBE.Tests.csproj --configuration Debug --logger trx -e:CollectCoverage=true -e:CoverletOutput=TestResults/ -e:CoverletOutputFormat=lcov --settings:./src/TBE.Tests/CodeCoverage.runsettings
    - name: Publish coverage report to coveralls.io
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: src/TBE.Tests/TestResults/coverage.info 
      continue-on-error: true
    - name: Build code in debug
      run: dotnet build src/TBE.Logic/TBE.Logic.csproj --configuration Debug -p:Version='${{ steps.gitversion.outputs.MajorMinorPatch }}'
    - name: Pack code into NuGet package in release
      run: dotnet pack src/TBE.Logic/TBE.Logic.csproj --configuration Debug -p:Version='${{ steps.gitversion.outputs.MajorMinorPatch }}'
    - name: Upload package to GitHub
      uses: actions/upload-artifact@v4
      with:
        name: package
        path: src/TBE.Logic/bin/Debug/netstandard2.0 
    - name: Upload nuget package to GitHub
      uses: actions/upload-artifact@v4
      with:
        name: nugetPackage
        path: src/TBE.Logic/bin/Debug/  


  sonarCloud:
    name: Run SonarCloud analysis
    runs-on: ubuntu-latest
    if: false && github.ref == 'refs/heads/main' 
    steps:
      - name: Run Sonarcloud test
        uses: samsmithnz/SamsDotNetSonarCloudAction@v2
        with:
          projects: 'src/TBE.Logic/TBE.Logic.csproj'
          dotnet-version: '10.0.x'
          sonarcloud-organization: samsmithnz-github
          sonarcloud-project: samsmithnz_TurnBasedEngine
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          

  release:
    runs-on: ubuntu-latest
    needs: 
    - build
    #- sonarCloud
    if: github.ref == 'refs/heads/main'      
    steps:
    - name: Display GitVersion outputs
      run: |
        echo "Version: ${{ needs.build.outputs.Version }}" 
        echo "CommitsSinceVersionSource: ${{ needs.build.outputs.CommitsSinceVersionSource }}" 
    - name: Download nuget package artifact
      uses: actions/download-artifact@v4.3.0
      with:
        name: package  
    - name: Download nuget package artifact
      uses: actions/download-artifact@v4.3.0
      with:
        name: nugetPackage 
        path: nugetPackage 
    #- name: Publish nuget package to nuget.org
    #  if: needs.build.outputs.CommitsSinceVersionSource > 0 #Only publish a NuGet package if there has been a commit/version change
    #  run: dotnet nuget push package\*.nupkg --api-key "${{ secrets.GHPackagesToken }}" --source "https://api.nuget.org/v3/index.json"
    #  shell: pwsh
    - name: Prep package for packing
      run: dotnet nuget add source --username samsmithnz --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/samsmithnz/index.json"
    - run: dir nugetPackage/*.*
    - name: Publish nuget package to GitHub Packages
      if: needs.build.outputs.CommitsSinceVersionSource > 0 #Only publish a NuGet package if there has been a commit/version change
      run: dotnet nuget push nugetPackage/*.nupkg --api-key ${{ secrets.GITHUB_TOKEN }} --source "github"
      shell: pwsh
    - name: Create Release
      uses: actions/create-release@v1
      if: 0 == 1 #needs.build.outputs.CommitsSinceVersionSource > 0 #Only create a release if there has been a commit/version change
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ needs.build.outputs.Version }}
        release_name: Release ${{ needs.build.outputs.Version }}
    - name: Create Release
      if: needs.build.outputs.CommitsSinceVersionSource > 0 #Only release if there has been a commit/version change
      uses: ncipollo/release-action@v1
      with:
        tag: "v${{ needs.build.outputs.Version }}"
        name: "v${{ needs.build.outputs.Version }}"
        artifacts: "package/*"
        token: ${{ secrets.GITHUB_TOKEN }}
